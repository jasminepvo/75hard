// src/components/Track.js
import { useState, useEffect } from 'react';
import { databases, account } from "@/lib/server/appwrite";
import { ID, Permission, Role } from "appwrite";
import { Query } from "appwrite"; // Import Query from Appwrite SDK

export default function Track({ updateCompletedDay, completedDays }) { // Receive the updateCompletedDay function and completedDays
    const tasks = [
        "45 min workout",
        "45 min workout outdoor",
        "Drink water",
        "Follow diet, no cheating",
        "Read 10 pages",
        "Take progress photo",
    ];

    const [taskStatus, setTaskStatus] = useState([]);
    const [userId, setUserId] = useState(null);

    useEffect(() => {
        const fetchUserAndTasks = async () => {
            try {
                const user = await account.get(); // Get the current authenticated user
                setUserId(user.$id); // Store the user ID

                // Query documents where the "user" field matches the current user's ID
                const response = await databases.listDocuments(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID, // Database ID from .env
                    process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_ID, // Collection ID from .env
                    [Query.equal("user", user.$id)] // Correct way to filter documents by user ID
                );

                const statusArray = tasks.map((task) => {
                    const taskDoc = response.documents.find(doc => doc.taskName === task);
                    return taskDoc ? taskDoc.completed : false;
                });

                setTaskStatus(statusArray);

                // Check if all tasks for the day are completed
                const allCompleted = statusArray.every(status => status);

                // Update the first uncompleted day
                if (allCompleted) {
                    const firstUncompletedDayIndex = completedDays.findIndex(day => !day);
                    if (firstUncompletedDayIndex !== -1) {
                        updateCompletedDay(firstUncompletedDayIndex, true);
                    }
                }

            } catch (error) {
                console.error("Failed to retrieve user or tasks:", error);
            }
        };

        fetchUserAndTasks();
    }, [userId, tasks, completedDays, updateCompletedDay]);

    const handleCheckboxChange = async (index) => {
        if (!userId) {
            console.error("User ID is not available");
            return;
        }

        const updatedStatus = [...taskStatus];
        updatedStatus[index] = !updatedStatus[index];
        setTaskStatus(updatedStatus);

        try {
            const taskName = tasks[index];
            const completed = updatedStatus[index];
            const date = new Date().toISOString();

            // Create or update the task document in the database
            await databases.createDocument(
                process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID, // Database ID from .env
                process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_ID, // Collection ID from .env
                ID.unique(), // Unique document ID generated by Appwrite
                {
                    taskName,
                    completed,
                    date,
                    user: userId // Save the user ID to the document
                },
                [
                    Permission.read(Role.user(userId)), // Permission for the authenticated user
                    Permission.update(Role.user(userId)), // Permission for the authenticated user
                ]
            );

            // Check if all tasks for the day are completed after the change
            const allCompleted = updatedStatus.every(status => status);

            // Update the first uncompleted day
            if (allCompleted) {
                const firstUncompletedDayIndex = completedDays.findIndex(day => !day);
                if (firstUncompletedDayIndex !== -1) {
                    updateCompletedDay(firstUncompletedDayIndex, true);
                }
            }

            console.log("Task updated successfully");
        } catch (error) {
            console.log("Failed to update task:", error);
        }
    };

    return (
        <div className="flex flex-col items-center">
            <h2 className="text-6xl font-extrabold font-subheading m-8">Day 11/75</h2>
            <ul className="space-y-2">
                {tasks.map((task, index) => (
                    <li key={index} className="flex items-center space-x-2">
                        <input
                            type="checkbox"
                            className="h-5 w-5 accent-strongTeal"
                            checked={taskStatus[index]}
                            onChange={() => handleCheckboxChange(index)}
                        />
                        <span className="text-lg">{task}</span>
                    </li>
                ))}
            </ul>
        </div>
    );
}